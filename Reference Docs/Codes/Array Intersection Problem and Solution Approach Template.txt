Array Intersection Problem

Input: 2 Arrays

Questions

1) Can I have duplicates in the given array? If yes, should I return all of them or just unique?
2) Do you just need the numbers or the indices of the the numbers?

Test Data

// Set 1

int[] numbers1 = {2,3,1,7,1};
int[] numbers2 = {12,8,4,7,9};

Output => {7}

// Set 2

int[] numbers1 = {12,3,1,7,1};
int[] numbers2 = {12,8,4,7,9};

Output => {12,7}

// Set 3

int[] numbers1 = {12,12,1,7,1};
int[] numbers2 = {12,8,4,7,9};

Output => {12,7}

// Set 4

int[] numbers1 = {12,3,11,17,1};
int[] numbers2 = {12,8,4,7,9};

Output => return empty array

// Set 5

int[] numbers1 = {12,3,11,17,1};
int[] numbers2 = {12,3,11,17,1};

Output => return {12,3,11,17,1}

Approach 1 : Brute Force

Psuedo Code

1) If the array 1 equals array 2 => if yes, return array 1
2) Else, Outer Loop through the array 1
3) Then Inner Loop through the array 2 
4) If the value of the array 1 and array 2 matches => Store them inside the new int array 
5) Finally return the new array 

Analysis

1) This solution will take [O)N^2] for the time complexity
2) The space complexity for this solution can be O[N] incase of data Set 5


Approach 2 : Using Built-in Set Intersection

Psuedo Code

1) Push the array 1 to Set 1
2) Push the array 2 to Set 2
3) Using RetainAll method, get all the common items in Set 1
4) Loop through every item in Set 1 and add to the new array, return it !!

Analysis

1) This solution will take [O(NxM)] for the time complexity [Worst Case]
   Note: Use this link to know why? https://wiki.python.org/moin/TimeComplexity#set
2) The space complexity for this solution can be O[N+M] incase of worst case

Similarly, you can solve through several other techniques

Approach 3: Using While Loop with O[N]
Approach 4: Using Hashing with O[2N]








