import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'slotWheels' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING_ARRAY history as parameter.
     */

    public static int slotWheels(List<String> history) {
    // Write your code here
         int len=history.size();
         int maxVal;
         int output=0;
         
            for(int i=0;i<len;i++){
                char[] arr=history.get(i).toCharArray();
                Arrays.sort(arr);
                history.set(i, String.valueOf(arr));
            }
            int col=history.get(0).length()-1;
            for(int j=col;j>=0;j--){
                maxVal=0;
                for(int k=0;k<len;k++){
                    maxVal=Math.max(maxVal, Character.getNumericValue(history.get(k).charAt(j)));
                }
                output+=maxVal;
            }
         return output;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int historyCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> history = IntStream.range(0, historyCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        int result = Result.slotWheels(history);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
