Question:
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

Example:

Input: [1,2,3,null,5,null,4]
Output: [1, 3, 4]
Explanation:

   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        
        if(root == null)
            return new ArrayList<Integer>();
        
        ArrayDeque<TreeNode> queue = new ArrayDeque<TreeNode>();
        List<Integer> rightView = new ArrayList<Integer>();
        
        queue.offer(root);
        
        while(!queue.isEmpty()){
            int countOfElements = queue.size();
            for(int i=0; i < countOfElements; i++){ // iterate all elements in that level
                 TreeNode node = queue.poll();
                 if(i == (countOfElements-1)){
                     rightView.add(node.val);
                 }
                
                 if(node.left != null){
                     queue.offer(node.left);
                 } 
                
                 if(node.right != null){
                     queue.offer(node.right);
                 } 
            }
            
        }
        return rightView;    
    }
}