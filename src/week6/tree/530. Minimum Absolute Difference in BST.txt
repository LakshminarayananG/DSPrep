Question:
Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.

Example:

Input:

   1
    \
     3
    /
   2

Output:
1

Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).
 

Note:

There are at least two nodes in this BST.
This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/

Solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    int diff=Integer.MAX_VALUE;
    List<Integer> list=new ArrayList<>();

    public int getMinimumDifference(TreeNode root) {
        List<Integer> l=minDiff(root);
        
        for(int i=1;i<l.size();i++){
            diff=Math.min(diff,l.get(i)-l.get(i-1));
        }
        
        return diff;
    }
    
    private List<Integer> minDiff(TreeNode node){
        
        if(node != null){    
            minDiff(node.left);
            list.add(node.val);
            minDiff(node.right);
        }
        
        return list;
    }
}